name: Slow tests (Docker + pytest)

on:
  # push:
  #   branches:
  #     [main]
  # pull_request:
  #   branches:
  #     [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  slow:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      RUN_SLOW_TESTS: "1"

    steps:
      - uses: actions/checkout@v5

      - name: Set up uv + Python
        uses: astral-sh/setup-uv@v7.1.1
        with:
          python-version: '3.12.10'
          enable-cache: true

      - name: Verify Docker availability
        run: |
          docker --version
          docker info

      - name: Pre-pull DB images
        run: |
          set -e
          images=(
            "postgres:latest"
            "mariadb:latest"
            "mysql:8.0"
            "gvenzl/oracle-free:latest-faststart"
            "mcr.microsoft.com/mssql/server:2022-latest"
          )
          for img in "${images[@]}"; do
            echo "Pulling $img"
            docker pull "$img"
          done

      - name: Install MS ODBC Driver 18 for SQL Server (for MSSQL tests)
        run: |
          set -e
          UBUNTU_VERSION=$(lsb_release -rs)
          curl -sSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /usr/share/keyrings/microsoft.gpg >/dev/null
          curl -sSL https://packages.microsoft.com/config/ubuntu/${UBUNTU_VERSION}/prod.list | sudo tee /etc/apt/sources.list.d/microsoft-prod.list >/dev/null
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 unixodbc-dev

      - name: Install Oracle Instant Client
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y unzip curl libnsl2 || true
          # Handle libaio package name differences across Ubuntu versions
          set +e
          sudo apt-get install -y libaio1
          if [ $? -ne 0 ]; then
            sudo apt-get install -y libaio1t64
          fi
          set -e

          mkdir -p /opt/oracle
          # Retrieve Instant Client ZIP via repo artifact, or public Oracle download
          if [ -f data/instantclient.zip ]; then
            echo "Using repository artifact at data/instantclient.zip"
            cp data/instantclient.zip /tmp/instantclient.zip
          else
            echo "Attempting Oracle Instant Client (Basic Light) latest permanent link"
            ORACLE_IC_PERM_BASICLITE="https://download.oracle.com/otn_software/linux/instantclient/instantclient-basiclite-linuxx64.zip"
            ORACLE_IC_PERM_BASIC="https://download.oracle.com/otn_software/linux/instantclient/instantclient-basic-linuxx64.zip"
            if ! curl -fsSL "$ORACLE_IC_PERM_BASICLITE" -o /tmp/instantclient.zip; then
              echo "Basic Lite permanent link failed; trying Basic (larger) package"
              if ! curl -fsSL "$ORACLE_IC_PERM_BASIC" -o /tmp/instantclient.zip; then
                echo "Public download failed; Oracle+ConnectorX tests will be skipped."
                exit 0
              fi
            fi
          fi

          sudo unzip -q /tmp/instantclient.zip -d /opt/oracle
          icdir=$(find /opt/oracle -maxdepth 1 -type d -name "instantclient_*" | head -n1)
          if [ -z "$icdir" ]; then
            echo "Could not locate Instant Client directory after unzip" >&2
            exit 0
          fi
          echo "Detected Instant Client at: $icdir"
          # Make libraries discoverable for native clients
          echo "$icdir" | sudo tee /etc/ld.so.conf.d/oracle-instantclient.conf >/dev/null
          sudo ldconfig
          # Expose for Python code (get_config_value -> initialize_oracle_client)
          echo "SRC_CONNECTORX_ORACLE_CLIENT_PATH=$icdir" >> "$GITHUB_ENV"

      - name: Run slow tests (verbose, uncaptured)
        run: >-
          uv run --frozen -m pytest
          -vv -s -rA --durations=25 --maxfail=1
          -o log_cli=true -o log_cli_level=INFO
          tests/test_*integration*.py
