import os, re

def correct_sql_for_postgres(src_dir="ggm_db/sql/postgres_origineel",
                             dst_dir="ggm_db/sql/postgres_correctie"):
    os.makedirs(dst_dir, exist_ok=True)

    # “candidate” tokens: start‑of‑line OR whitespace OR comma
    invalid_identifier_pattern = re.compile(r'(^|[\s,(])(\d\w+)', re.MULTILINE)

    for fname in os.listdir(src_dir):
        if not fname.lower().endswith(".sql"):
            continue

        src_path = os.path.join(src_dir, fname)
        dst_path = os.path.join(dst_dir, fname)

        with open(src_path, encoding="utf-8") as f:
            content = f.read()

        def quote_invalid_identifier(m):
            lead, ident = m.groups()

            # Are we inside a quoted identifier?
            if content[:m.start(2)].count('"') % 2 == 1:
                return m.group(0)  # leave unchanged

            # Skip numeric lengths like varchar(50)
            if lead.endswith('('):
                return m.group(0)

            # Already quoted? / contains spaces / punctuation?
            if any(c in ident for c in '" .:-,'):
                return m.group(0)

            return f'{lead}"{ident}"'

        # Quote numeric identifiers
        content = invalid_identifier_pattern.sub(quote_invalid_identifier, content)

        # PostgreSQL type / syntax tweaks
        content = re.sub(r'\bDATETIME\b', 'TIMESTAMP', content, flags=re.I)
        content = re.sub(r'\bdouble precision NULL\b', 'double precision', content, flags=re.I)
        content = re.sub(r'\bIDENTITY\b', 'GENERATED BY DEFAULT AS IDENTITY', content, flags=re.I)

        # Remove quotes around varchar/char lengths
        content = re.sub(r'\b(varchar|char)\s*\(\s*"(\d+)"\s*\)', r'\1(\2)', content, flags=re.I)

        # Fix incorrectly encoded identifier
        content = content.replace("Enum_plaatsoriã«ntatie", "Enum_plaatsorientatie")

        with open(dst_path, "w", encoding="utf-8") as f:
            f.write(content)

    print(f"Processed all SQL files from '{src_dir}' into '{dst_dir}'.")
